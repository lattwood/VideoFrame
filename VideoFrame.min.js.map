{"version":3,"sources":["VideoFrame.js"],"names":["VideoFrame","options","this","window","obj","frameRate","video","document","getElementById","id","getElementsByTagName","FrameRates","film","NTSC","NTSC_Film","NTSC_HD","PAL","PAL_HD","web","high","prototype","get","Math","floor","currentTime","toFixed","listen","format","tick","_video","interval","setInterval","paused","ended","frame","toSMPTE","toTime","callback","console","log","stopListen","clearInterval","fps","frames","wrap","n","time","dt","Date","setHours","setMinutes","setSeconds","setMilliseconds","replace","getHours","getMinutes","getSeconds","frameNumber","Number","_hour","_minute","_hours","_minutes","toString","split","_seconds","SMPTE","toSeconds","toMilliseconds","milliseconds","isNaN","toFrames","hh","mm","ss","ff","__seek","direction","pause","seekForward","seekBackward","seekTo","config","seekTime","option","Object","keys"],"mappings":"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","file":"VideoFrame.min.js","sourcesContent":["/** @preserve\nVideoFrame: HTML5 Video - SMTPE Time Code capturing and Frame Seeking API\n@version 0.2.2\n@author Allen Sarkisyan\n@copyright (c) 2013 Allen Sarkisyan \n@license Released under the Open Source MIT License\n\nContributors:\nAllen Sarkisyan - Lead engineer\nPaige Raynes - Product Development\nDan Jacinto - Video Asset Quality Analyst\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, and/or distribute copies of the\nSoftware, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\n- The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n- Attribution must be credited to the original authors in derivative works.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * @class\n * @classdesc Main VideoFrame Implementation.\n * @param {Object} options - Configuration object for initialization.\n */\nvar VideoFrame = function(options) {\n\tif (this === window) { return new VideoFrame(options); }\n\tthis.obj = options || {};\n\tthis.frameRate = this.obj.frameRate || 24;\n\tthis.video = document.getElementById(this.obj.id) || document.getElementsByTagName('video')[0];\n};\n\n/**\n * FrameRates - Industry standard frame rates\n *\n * @namespace\n * @type {Object}\n * @property {Number} film - 24\n * @property {Number} NTSC - 29.97\n * @property {Number} NTSC_Film - 23.98\n * @property {Number} NTSC_HD - 59.94\n * @property {Number} PAL - 25\n * @property {Number} PAL_HD - 50\n * @property {Number} web - 30\n * @property {Number} high - 60\n */\nvar FrameRates = {\n\tfilm: 24,\n\tNTSC : 29.97,\n\tNTSC_Film: 23.98,\n\tNTSC_HD : 59.94,\n\tPAL: 25,\n\tPAL_HD: 50,\n\tweb: 30,\n\thigh: 60\n};\n\nVideoFrame.prototype = {\n\t/**\n\t * Returns the current frame number\n\t * \n\t * @return {Number} - Frame number in video\n\t */\n\tget : function() {\n\t\treturn Math.floor(this.video.currentTime.toFixed(5) * this.frameRate);\n\t},\n\t/**\n\t * Event listener for handling callback execution at double the current frame rate interval\n\t * \n\t * @param  {String} format - Accepted formats are: SMPTE, time, frame\n\t * @param  {Number} tick - Number to set the interval by.\n\t * @return {Number} Returns a value at a set interval\n\t */\n\tlisten : function(format, tick) {\n\t\tvar _video = this;\n\t\tif (!format) { console.log('VideoFrame: Error - The listen method requires the format parameter.'); return; }\n\t\tthis.interval = setInterval(function() {\n\t\t\tif (_video.video.paused || _video.video.ended) { return; }\n\t\t\tvar frame = ((format === 'SMPTE') ? _video.toSMPTE() : ((format === 'time') ? _video.toTime() : _video.get()));\n\t\t\tif (_video.obj.callback) { _video.obj.callback(frame, format); }\n\t\t\treturn frame;\n\t\t}, (tick ? tick : 1000 / _video.frameRate / 2));\n\t},\n\t/** Clears the current interval */\n\tstopListen : function() {\n\t\tvar _video = this;\n\t\tclearInterval(_video.interval);\n\t},\n\tfps : FrameRates\n};\n\n/**\n * Returns the current time code in the video in HH:MM:SS format\n * - used internally for conversion to SMPTE format.\n * \n * @param  {Number} frames - The current time in the video\n * @return {String} Returns the time code in the video\n */\nVideoFrame.prototype.toTime = function(frames) {\n\tvar time = (typeof frames !== 'number' ? this.video.currentTime : frames), frameRate = this.frameRate;\n\tvar dt = (new Date()), format = 'hh:mm:ss' + (typeof frames === 'number' ? ':ff' : '');\n\tdt.setHours(0); dt.setMinutes(0); dt.setSeconds(0); dt.setMilliseconds(time * 1000);\n\tfunction wrap(n) { return ((n < 10) ? '0' + n : n); }\n\treturn format.replace(/hh|mm|ss|ff/g, function(format) {\n\t\tswitch (format) {\n\t\t\tcase \"hh\": return wrap(dt.getHours() < 13 ? dt.getHours() : (dt.getHours() - 12));\n\t\t\tcase \"mm\": return wrap(dt.getMinutes());\n\t\t\tcase \"ss\": return wrap(dt.getSeconds());\n\t\t\tcase \"ff\": return wrap(Math.floor(((time % 1) * frameRate)));\n\t\t}\n\t});\n};\n\n/**\n * Returns the current SMPTE Time code in the video.\n * - Can be used as a conversion utility.\n * \n * @param  {Number} frame - OPTIONAL: Frame number for conversion to it's equivalent SMPTE Time code.\n * @return {String} Returns a SMPTE Time code in HH:MM:SS:FF format\n */\nVideoFrame.prototype.toSMPTE = function(frame) {\n\tif (!frame) { return this.toTime(this.video.currentTime); }\n\tvar frameNumber = Number(frame);\n\tvar fps = this.frameRate;\n\tfunction wrap(n) { return ((n < 10) ? '0' + n : n); }\n\tvar _hour = ((fps * 60) * 60), _minute = (fps * 60);\n\tvar _hours = (frameNumber / _hour).toFixed(0);\n\tvar _minutes = (Number((frameNumber / _minute).toString().split('.')[0]) % 60);\n\tvar _seconds = (Number((frameNumber / fps).toString().split('.')[0]) % 60);\n\tvar SMPTE = (wrap(_hours) + ':' + wrap(_minutes) + ':' + wrap(_seconds) + ':' + wrap(frameNumber % fps));\n\treturn SMPTE;\n};\n\n/**\n * Converts a SMPTE Time code to Seconds\n * \n * @param  {String} SMPTE - a SMPTE time code in HH:MM:SS:FF format\n * @return {Number} Returns the Second count of a SMPTE Time code\n */\nVideoFrame.prototype.toSeconds = function(SMPTE) {\n\tif (!SMPTE) { return Math.floor(this.video.currentTime); }\n\tvar time = SMPTE.split(':');\n\treturn (((Number(time[0]) * 60) * 60) + (Number(time[1]) * 60) + Number(time[2]));\n};\n\n/**\n * Converts a SMPTE Time code, or standard time code to Milliseconds\n * \n * @param  {String} SMPTE OPTIONAL: a SMPTE time code in HH:MM:SS:FF format,\n * or standard time code in HH:MM:SS format.\n * @return {Number} Returns the Millisecond count of a SMPTE Time code\n */\nVideoFrame.prototype.toMilliseconds = function(SMPTE) {\n\tvar frames = (!SMPTE) ? Number(this.toSMPTE().split(':')[3]) : Number(SMPTE.split(':')[3]);\n\tvar milliseconds = (1000 / this.frameRate) * (isNaN(frames) ? 0 : frames);\n\treturn Math.floor(((this.toSeconds(SMPTE) * 1000) + milliseconds));\n};\n\n/**\n * Converts a SMPTE Time code to it's equivalent frame number\n * \n * @param  {String} SMPTE - OPTIONAL: a SMPTE time code in HH:MM:SS:FF format\n * @return {Number} Returns the long running video frame number\n */\nVideoFrame.prototype.toFrames = function(SMPTE) {\n\tvar time = (!SMPTE) ? this.toSMPTE().split(':') : SMPTE.split(':');\n\tvar frameRate = this.frameRate;\n\tvar hh = (((Number(time[0]) * 60) * 60) * frameRate);\n\tvar mm = ((Number(time[1]) * 60) * frameRate);\n\tvar ss = (Number(time[2]) * frameRate);\n\tvar ff = Number(time[3]);\n\treturn Math.floor((hh + mm + ss + ff));\n};\n\n/**\n * Private - seek method used internally for the seeking functionality.\n * \n * @param  {String} direction - Accepted Values are: forward, backward\n * @param  {Number} frames - Number of frames to seek by.\n */\nVideoFrame.prototype.__seek = function(direction, frames) {\n\tif (!this.video.paused) { this.video.pause(); }\n\tvar frame = Number(this.get());\n\t/** To seek forward in the video, we must add 0.00001 to the video runtime for proper interactivity */\n\tthis.video.currentTime = ((((direction === 'backward' ? (frame - frames) : (frame + frames))) / this.frameRate) + 0.00001);\n};\n\n/**\n * Seeks forward [X] amount of frames in the video.\n * \n * @param  {Number} frames - Number of frames to seek by.\n * @param  {Function} callback - Callback function to execute once seeking is complete.\n */\nVideoFrame.prototype.seekForward = function(frames, callback) {\n\tif (!frames) { frames = 1; }\n\tthis.__seek('forward', Number(frames));\n\treturn (callback ? callback() : true);\n};\n\n/**\n * Seeks backward [X] amount of frames in the video.\n * \n * @param  {Number} frames - Number of frames to seek by.\n * @param  {Function} callback - Callback function to execute once seeking is complete.\n */\nVideoFrame.prototype.seekBackward = function(frames, callback) {\n\tif (!frames) { frames = 1; }\n\tthis.__seek('backward', Number(frames));\n\treturn (callback ? callback() : true);\n};\n\n/**\n * For seeking to a certain SMPTE time code, standard time code, frame, second, or millisecond in the video.\n * - Was previously deemed not feasible. Veni, vidi, vici.\n *  \n * @param  {Object} option - Configuration Object for seeking allowed keys are SMPTE, time, frame, seconds, and milliseconds\n * example: { SMPTE: '00:01:12:22' }, { time: '00:01:12' },  { frame: 1750 }, { seconds: 72 }, { milliseconds: 72916 }\n */\nVideoFrame.prototype.seekTo = function(config) {\n\tvar obj = config || {}, seekTime, SMPTE;\n\t/** Only allow one option to be passed */\n\tvar option = Object.keys(obj)[0];\n\n\tif (option == 'SMPTE' || option == 'time') {\n\t\tSMPTE = obj[option];\n\t\tseekTime = ((this.toMilliseconds(SMPTE) / 1000) + 0.001);\n\t\tthis.video.currentTime = seekTime;\n\t\treturn;\n\t}\n\n\tswitch(option) {\n\t\tcase 'frame':\n\t\t\tSMPTE = this.toSMPTE(obj[option]);\n\t\t\tseekTime = ((this.toMilliseconds(SMPTE) / 1000) + 0.001);\n\t\t\tbreak;\n\t\tcase 'seconds':\n\t\t\tseekTime = Number(obj[option]);\n\t\t\tbreak;\n\t\tcase 'milliseconds':\n\t\t\tseekTime = ((Number(obj[option]) / 1000) + 0.001);\n\t\t\tbreak;\n\t}\n\t\n\tif (!isNaN(seekTime)) {\n\t\tthis.video.currentTime = seekTime;\n\t}\n};"],"sourceRoot":"/source/"}